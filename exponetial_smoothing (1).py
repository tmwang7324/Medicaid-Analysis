# -*- coding: utf-8 -*-
"""exponetial smoothing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_c_-fR2Bbu5_Udywp8-DiCzDzEOsG2gW
"""



import pandas as pd
df = pd.read_csv('df.csv')
df

# run expoential smoothing to see it's performance

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_absolute_error, r2_score

# Assuming you have the data in a DataFrame called 'df'
df['ds'] = pd.to_datetime(df['ds'])
df.set_index('ds', inplace=True)
df.sort_index(inplace=True)

# Split the data into train and test sets
train_size = int(len(df) * 0.8)  # 80% of data for training
train_data, test_data = df[:train_size], df[train_size:]

# Fit the ETS model to the training data
model = ExponentialSmoothing(train_data['y'], trend='add', seasonal='add', seasonal_periods=12)
fitted_model = model.fit()

# Generate predictions using the fitted model
predictions = fitted_model.predict(start=test_data.index[0], end=test_data.index[-1])

# Calculate MAE and R2 score
mae = mean_absolute_error(test_data['y'], predictions)
r2 = r2_score(test_data['y'], predictions)
print('MAE: %.3f' % mae)
print('R2: %.3f' % r2)


# Plot actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['y'], label='Actual')
plt.plot(test_data.index, predictions, label='Predicted')
plt.xlim([pd.to_datetime('2021-01-01'), df.index.max()])
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Actual vs. Predicted')
plt.legend()
plt.show()

# compare the train test mae and r2 to see differences, big differnces imply overfitting If the training error is significantly lower than the test error, it is a sign of overfitting.

train_predictions = fitted_model.predict(start=train_data.index[0], end=train_data.index[-1])
train_mae = mean_absolute_error(train_data['y'], train_predictions)
train_r2 = r2_score(train_data['y'], train_predictions)

print("Training set MAE:", train_mae)
print("Training set R2 Score:", train_r2)
print("Test set MAE:", mae)
print("Test set R2 Score:", r2)

#use this model to make predictions for the next 10 years and plot the orginal data with predicted data in one chart

# Generate predictions for 2023 and 2033
forecast_start = pd.to_datetime('1/1/2023')
forecast_end = pd.to_datetime('12/31/2033')
forecast = fitted_model.predict(start=forecast_start, end=forecast_end)

# Combine original data with predicted data
combined_data = pd.concat([df['y'], forecast])

# Plot original data and predicted data
plt.figure(figsize=(10, 6))
plt.plot(combined_data.index, combined_data, label='Combined')
plt.plot(df.index, df['y'], label='Original')
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Original vs. Predicted')
plt.legend()
plt.show()









